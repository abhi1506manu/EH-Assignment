{"ast":null,"code":"var _jsxFileName = \"/home/abhimanyu1506/Project/Simple_mern/front-end/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport Header from './components/header/header.';\nimport NewProduct from './components/products/newProduct';\nimport ProductList from \"./components/products/productList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // TODO:\n  // render the complete UI\n  const [loadedProducts, setLoadedProducts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // fetch all products\n\n  useEffect(() => {\n    const fetchProducts = async () => {\n      setIsLoading(true);\n      const response = await fetch('http://localhost:5000/products');\n      const responseData = await response.json();\n      setLoadedProducts(responseData.products);\n      console.log(responseData);\n      setIsLoading(false);\n    };\n\n    fetchProducts(); // call the above func\n  }, []); // put the entered product\n\n  const addProductHandler = async (productName, productPrice) => {\n    try {\n      // product object that will be sent to server\n      const newProduct = {\n        title: productName,\n        price: +productPrice\n      };\n      let hasError = false;\n      const response = await fetch('http://localhost:5000/product', {\n        method: 'POST',\n        body: JSON.stringify(newProduct),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        hasError = true;\n      }\n\n      const responseData = await response.json();\n\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n\n      setLoadedProducts(prevProducts => {\n        return prevProducts.concat({ ...newProduct,\n          id: responseData.product.id\n        });\n      });\n    } catch (err) {\n      alert(err.message || 'Oops! Looks like something went wrong!');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(NewProduct, {\n        onAddProduct: addProductHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loader\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 23\n      }, this), !isLoading && /*#__PURE__*/_jsxDEV(ProductList, {\n        items: loadedProducts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ZZnZUsozVEShi7/RQB+SfDAmt+c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","NewProduct","ProductList","App","loadedProducts","setLoadedProducts","isLoading","setIsLoading","fetchProducts","response","fetch","responseData","json","products","console","log","addProductHandler","productName","productPrice","newProduct","title","price","hasError","method","body","JSON","stringify","headers","ok","Error","message","prevProducts","concat","id","product","err","alert"],"sources":["/home/abhimanyu1506/Project/Simple_mern/front-end/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport './App.css';\n\nimport Header from './components/header/header.';\nimport NewProduct from './components/products/newProduct';\nimport ProductList from \"./components/products/productList\";\n\nfunction App() {\n  // TODO:\n  // render the complete UI\n  const [loadedProducts, setLoadedProducts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // fetch all products\n  useEffect(() => {\n    const fetchProducts = async () => {\n      setIsLoading(true);\n      const response = await fetch('http://localhost:5000/products');\n\n      const responseData = await response.json();\n\n      setLoadedProducts(responseData.products);\n\n      console.log(responseData);\n\n      setIsLoading(false);\n\n    };\n\n    fetchProducts(); // call the above func\n  }, []);\n\n  // put the entered product\n  const addProductHandler = async (productName, productPrice) => {\n    try {\n      // product object that will be sent to server\n      const newProduct = {\n        title: productName,\n        price: +productPrice\n      };\n\n      let hasError = false;\n\n      const response = await fetch('http://localhost:5000/product', {\n        method: 'POST',\n        body: JSON.stringify(newProduct),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        hasError = true;\n      }\n\n      const responseData = await response.json();\n\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n\n      setLoadedProducts(prevProducts => {\n        return prevProducts.concat({\n          ...newProduct,\n          id: responseData.product.id\n        });\n      });\n    } catch (err) {\n      alert(err.message || 'Oops! Looks like something went wrong!');\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Header />\n      <main>\n        <NewProduct onAddProduct={addProductHandler} />\n        {isLoading && <p className=\"loader\">Loading...</p>}\n        {!isLoading && <ProductList items={loadedProducts} />}\n      </main>\n    </React.Fragment>\n  );\n\n}\n\nexport default App;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAO,WAAP;AAEA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb;EACA;EACA,MAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAAC,EAAD,CAApD;EACA,MAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C,CAJa,CAMb;;EACAC,SAAS,CAAC,MAAM;IACd,MAAMS,aAAa,GAAG,YAAY;MAChCD,YAAY,CAAC,IAAD,CAAZ;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAD,CAA5B;MAEA,MAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;MAEAP,iBAAiB,CAACM,YAAY,CAACE,QAAd,CAAjB;MAEAC,OAAO,CAACC,GAAR,CAAYJ,YAAZ;MAEAJ,YAAY,CAAC,KAAD,CAAZ;IAED,CAZD;;IAcAC,aAAa,GAfC,CAeG;EAClB,CAhBQ,EAgBN,EAhBM,CAAT,CAPa,CAyBb;;EACA,MAAMQ,iBAAiB,GAAG,OAAOC,WAAP,EAAoBC,YAApB,KAAqC;IAC7D,IAAI;MACF;MACA,MAAMC,UAAU,GAAG;QACjBC,KAAK,EAAEH,WADU;QAEjBI,KAAK,EAAE,CAACH;MAFS,CAAnB;MAKA,IAAII,QAAQ,GAAG,KAAf;MAEA,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAAD,EAAkC;QAC5Da,MAAM,EAAE,MADoD;QAE5DC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,UAAf,CAFsD;QAG5DQ,OAAO,EAAE;UACP,gBAAgB;QADT;MAHmD,CAAlC,CAA5B;;MAQA,IAAI,CAAClB,QAAQ,CAACmB,EAAd,EAAkB;QAChBN,QAAQ,GAAG,IAAX;MACD;;MAED,MAAMX,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;;MAEA,IAAIU,QAAJ,EAAc;QACZ,MAAM,IAAIO,KAAJ,CAAUlB,YAAY,CAACmB,OAAvB,CAAN;MACD;;MAEDzB,iBAAiB,CAAC0B,YAAY,IAAI;QAChC,OAAOA,YAAY,CAACC,MAAb,CAAoB,EACzB,GAAGb,UADsB;UAEzBc,EAAE,EAAEtB,YAAY,CAACuB,OAAb,CAAqBD;QAFA,CAApB,CAAP;MAID,CALgB,CAAjB;IAMD,CAjCD,CAiCE,OAAOE,GAAP,EAAY;MACZC,KAAK,CAACD,GAAG,CAACL,OAAJ,IAAe,wCAAhB,CAAL;IACD;EACF,CArCD;;EAuCA,oBACE,QAAC,KAAD,CAAO,QAAP;IAAA,wBACE,QAAC,MAAD;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA,wBACE,QAAC,UAAD;QAAY,YAAY,EAAEd;MAA1B;QAAA;QAAA;QAAA;MAAA,QADF,EAEGV,SAAS,iBAAI;QAAG,SAAS,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFhB,EAGG,CAACA,SAAD,iBAAc,QAAC,WAAD;QAAa,KAAK,EAAEF;MAApB;QAAA;QAAA;QAAA;MAAA,QAHjB;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAWD;;GA5EQD,G;;KAAAA,G;AA8ET,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}